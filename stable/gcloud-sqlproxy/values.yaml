## Google Cloud SQL Proxy image
## ref: https://cloud.google.com/sql/docs/mysql/sql-proxy
## ref: https://cloud.google.com/sql/docs/postgres/sql-proxy
image:
  repository: gcr.io/cloudsql-docker/gce-proxy
  # Note that by default we use appVersion to get image tag
  # tag:
  ## Specify a imagePullPolicy
  ## 'Always' if imageTag is 'latest', else set to 'IfNotPresent'
  ## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
  pullPolicy: IfNotPresent

## Replicas Set count
replicasCount: 1

## Common labels for all K8S objects
commonLabels: {}

## Set to true to use a statefulset for the deployable.
## You can then access the nodes using the known-hostnames of a statefulset
useStatefulset: false

## Specify the deployment strategy for pods
deploymentStrategy: {}

## Set the GCP service account key JSON file.
## Service account has access be set to Cloud SQL instances
## the key must be encoded with base64
## e.g. `cat service-account.json | base64`
## only used if no existing secret is specified
##
serviceAccountKey: ""

## Specify an existing secret holding the cloud-sql service account credentials
existingSecret: ""
## The key in the existing secret that stores the credentials
existingSecretKey: ""

## serviceAccountName to specify the service account name that will be generated
serviceAccountName: ""

## usingGCPController to control if the service account should be generated and injected
usingGCPController: ""

## SQL connection settings
##
cloudsql:
  ## PostgreSQL/MySQL instances:
  ## update with your GCP project, the region of your Cloud SQL instance
  ## and the name of your Cloud SQL instance
  ## PostgreSQL port 5432 or MySQL port 3306, or other port you set for your SQL instance.
  ## Use different ports for different instances.
  instances:
    # GCP instance name.
  - instance: "instance"
    # Optional abbreviation used to override the truncated instance name if the
    # 15 character instance name prefix is not unique for use as a port
    # identifier.
    instanceShortName: ""
    # GCP project where the instance exists.
    project: "project"
    # GCP region where the instance exists.
    region: "region"
    # Port number for the proxy to expose for this instance.
    port: 5432

rbac:
  create: false

serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  annotations: {}
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

## Specifies service type and option to enable internal LoadBalancer
## If service.internalLB is true, service.type should be: LoadBalancer
service:
  enabled: true
  type: ClusterIP
  internalLB: false
  # Configures custom LoadBalancer IP. Compatibility depends on the cloud provider.
  # For instance, GCP Internal LoadBalancer will take it into account.
  # If left blank or if not supported by your cloud provider, it will be ignored.
  loadBalancerIP: ""
  annotations: {}
  loadBalancerSourceRanges: []

networkPolicy:
  ## Specifies whether a NetworkPolicy should be created
  ##
  enabled: true

  ingress:
    from: []
    # # List of sources which should be able to access the pods selected for this rule.
    # # Items in this list are combined using a logical OR operation.
    # # If this field is empty or missing, this rule matches all sources (traffic not restricted by source).
    # # If this field is present and contains at least on item,
    # # this rule allows traffic only if the traffic matches at least one item in the from list.
    #   - podSelector:           # chooses pods with gcloud-sqlproxy-client="true"
    #       matchLabels:
    #         gcloud-sqlproxy-client: "true"

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## Resources are commented out as sometimes Memory/CPU limit causes spikes in query times
## https://github.com/GoogleCloudPlatform/cloudsql-proxy/issues/168#issuecomment-394099416
resources: {}
#  requests:
#    cpu: 100m
#    memory: 100Mi
#  limits:
#    memory: 256Mi
#    cpu: 256m

livenessProbe:
  enabled: false
  port: 5432
  initialDelaySeconds: 30
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 18
  successThreshold: 1


# Http Liveness Probe if enabled will override default tcp port check
httpLivenessProbe:
  enabled: false
  port: 8090

# Http Readiness Probe if enabled will override default tcp port check
httpReadinessProbe:
  enabled: false
  port: 8090

readinessProbe:
  enabled: false
  port: 5432
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

## Configure a HorizontalPodAutoscaler for pod autoscaling.
## Requires that resources requests are set above.
autoscaling:
  enabled: false
#  minReplicas: 1
#  maxReplicas: 3
## Only one of target CPU and Memory are required to enable the HPA.
## The ideal target varies and depends on gcloud-sqlproxy usage.
#  targetCPUUtilizationPercentage: 50
#  targetMemoryUtilizationPercentage: 50

## Number of seconds to wait before deleting the pod
## This must be greater than or equal to the time specified with the term_timeout arg, if you have set it
terminationGracePeriodSeconds: 30

## Pod annotations
podAnnotations: {}

## Pod labels
podLabels: {}

## Configure Pod Security Context
podSecurityContext: {}
#   runAsUser: 1000
#   fsGroup: 1000

## Configure Container Security Context
containerSecurityContext: {}
#   allowPrivilegeEscalation: false


## Configure Pod Priority
priorityClassName: ""

## Node selector
nodeSelector: {}

## Tolerations
tolerations: []

## Affinity
affinity: {}

## Extra environment variables. Might be used to fetch instance data from
## Config maps or Secrets and used via interpolation '$()' syntax in
## cloudsql.instances[].* helm variables. See:
## https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#use-configmap-defined-environment-variables-in-pod-commands
env: {}

## Lifecycle hooks
## These can be helpful for custom graceful termination logic
## NOTE: Your Docker image must have a shell for the preStop command to work, the default Docker image does not have one
lifecycleHooks: {}
#   preStop:
#     exec:
#       command: ['sleep', '10']

## Configure the PodDisruptionBudget
podDisruptionBudget: |
  maxUnavailable: 1

## Additional container arguments
## Uncomment the term_timeout line for the proxy to wait your chosen time before terminating connections
extraArgs: {}
#  term_timeout: 30s

topologySpreadConstraints: []
  ## e.g.
  # - maxSkew: 1
  #   topologyKey: zone
  #   whenUnsatisfiable: DoNotSchedule
  #   labelSelector:
  #       key: value
